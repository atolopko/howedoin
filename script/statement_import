#!/usr/bin/env rails runner


options = Trollop.options do
  opt :ending_balance, "Statement ending balance", short: 'b', type: :string, required: false
  opt :statement_date, "Statement date", short: 'd', type: :string, required: false
  opt :account_name, "Account name (SQL wildcard)", short: 'a', type: :string, required: true
  opt :parser, "Parser class name", short: 'p', type: :string, required: true
  opt :statement_file, "Statement file to import", short: 'f', type: :string, required: true
  opt :debug, "Show stack trace on error"
end

def parser_class(parser_class_name)
  Rails.application.eager_load!
  Importers.const_get parser_class_name
end

begin
  Account.transaction do
    parser_class = parser_class(options.parser)
    parser = parser_class.new(options.statement_file)
    ending_balance = options.ending_balance || parser.ending_balance
    raise "#{parser_class} cannot infer ending balance and --ending-balance option missing" if ending_balance.blank?
    statement_date = options.statement_date || parser.statement_date
    raise "#{parser_class} cannot infer statement_date and --statement_date option missing" if statement_date.blank?

    importer = Importers::PostedTransactionImporter.new(options.account_name, statement_date, ending_balance)
    importer.import(parser.posted_txns)
    if importer.errors?
      STDERR.puts "Found #{importer.errors.size} errors during import:\n"
      STDERR.puts importer.format_errors
      STDERR.puts "Imported #{importer.imported.size} transactions"
      raise ActiveRecord::Rollback
    end
    puts("Imported #{importer.imported.size} transactions")
  end
rescue StandardError => e
  raise e if options.debug
  ap e.message
end
